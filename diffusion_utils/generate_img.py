#  Copyright 2025, Bo Wang Lab
# 
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
 
#  http://www.apache.org/licenses/LICENSE-2.0
 
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# Based on code from https://github.com/bowang-lab/MorphoDiff

from diffusers import DDPMScheduler
import os
import torch
import datetime
import argparse
from transformers import AutoFeatureExtractor
from diffusers import AutoencoderKL, UNet2DConditionModel
import random
import numpy as np
import torch.nn.functional as F

from pipeline import CustomStableDiffusionPipeline

def set_seed(seed):
    """Set seed for reproducibility.

    Args:
        seed (int): seed for reproducibility"""

    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)

    return

def pad_prompts(embedding, no_batch_dim=False):
    """Standardize gene embedding dimension to (bs, 77, 768).

    Args:
        gene_embedding (tensor): gene embedding generated by scGPT in
        512 dimensions

    Returns:
        padded_tensor (tensor): gene embedding padded with value 1 to have
        dimension (77, 768)"""
    # pad gene_embedding with value 1 to have dimension 768
    # (768 is SD prompt encoding size)
    final_size = 768

    # Calculate the amount of padding on each side
    padding_left = (final_size - len(embedding)) // 2
    padding_right = final_size - len(embedding) - padding_left
    # Pad the tensor
    padded_tensor = F.pad(
        embedding, (padding_left, padding_right), 'constant', 1)
    
    if no_batch_dim:
        # replicate padded_tensor to have dimension (77, 768)
        padded_tensor = padded_tensor.repeat(77, 1).float()
    else:
        # replicate padded_tensor to have dimension (bs, 77, 768)
        padded_tensor = padded_tensor.repeat(1, 77, 1).float()

    return padded_tensor


def load_model_and_generate_images(pipeline, prompts,
                                   gen_img_path, num_imgs=5, guidance_scale=1., uncond_embedding=None, same_seed: bool = True, output_type: str = "pil"):
    """Load the model and generate images for the given prompts.

    Args:
        model_checkpoint (str): The address of the model checkpoint.
        prompts (list): A list of prompts to generate images for.
        gen_img_path (str): The address of the directory to save the generated
        images."""
    
    set_seed(42)
    if output_type == "latent":
        imgs = []

    for idx, prompt in enumerate(prompts):
        prompt = torch.from_numpy(prompt).float()
        prompt = pad_prompts(prompt)

        if not os.path.exists(gen_img_path):
            os.makedirs(gen_img_path)

        if same_seed:
            set_seed(42)
        start = datetime.datetime.now()

        for j in range(num_imgs):
            image = pipeline(
                prompt_embeds=prompt,
                negative_prompt_embeds=uncond_embedding,
                height=128,
                width=128,
                guidance_scale=guidance_scale,
                output_type=output_type)
            
            if output_type == "pil":
                image_name = f'prompt_{idx}-generated-{j}.png'
                image_path = os.path.join(gen_img_path, image_name)
                image.images[0].save(image_path)
            elif output_type == "latent":
                imgs.append(image.images[0].cpu())

        print("Generating time: ", datetime.datetime.now()-start)
        print()

    if output_type == "latent":
        imgs = torch.stack(imgs, axis=0).numpy()
        np.save(os.path.join(gen_img_path, "vae_latents.npy"), imgs, allow_pickle=False)

    return


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--model_checkpoint', default='',
                        help="The checkpoint root folder")
    parser.add_argument('--prompt_file',
                        default='', type=str,
                        help="A numpy file with prompt embeddings")
    parser.add_argument('--gen_img_path', default='',
                        help="Path to folder where generated images will be written")
    parser.add_argument('--num_imgs', default=5, type=int,
                        help="Number of images generated per prompt")
    parser.add_argument('--vae_path', default='',
                        help="VAE checkpoint")
    parser.add_argument("--classifier_free_guidance", action="store_true", 
                        help="Whether or not to use classifier-free guidance.")
    parser.add_argument("--guidance_scale", type=float, default=1.75,
                        help="Guidance weight, 1 disables guidance. Ignored if `--classifier_free_guidance` is not set.")
    parser.add_argument("--uncond_embedding", type=str, default="", 
                        help=(
                            "Path to file containing embedding of dummy condition, i.e. all gene inputs set to 0"
                            " ignored if `--classifier_free_guidance` is not set."
                        ),
    )
    parser.add_argument("--same_seed", action="store_true",
                        help="Whether to use the same seed for each prompt")
    parser.add_argument("--output_type", type=str, default="pil", choices=["pil", "latent"],
                        help="Whether to output decoded images or VAE embeddings")
    args = parser.parse_args()
    
    if not args.classifier_free_guidance:
        args.guidance_scale = 1.
        uncond_embedding = None
    else:
        uncond_embedding = pad_prompts(torch.from_numpy(np.load(args.uncond_embedding)).float())

    if not os.path.exists(args.gen_img_path):
        os.makedirs(args.gen_img_path, exist_ok=True)

    prompts = np.load(args.prompt_file)

    # initialize SD model
    feature_extractor = AutoFeatureExtractor.from_pretrained(
        args.model_checkpoint+'/feature_extractor')
    print('Loaded feature_extractor')

    vae = AutoencoderKL.from_pretrained(
        args.vae_path, subfolder="vae")
    print('Loaded vae model')

    unet = UNet2DConditionModel.from_pretrained(
        args.model_checkpoint, subfolder="unet_ema", use_auth_token=True)
    print('Loaded EMA unet model')

    noise_scheduler = DDPMScheduler.from_pretrained(
        args.model_checkpoint, subfolder="scheduler")
    print('Loaded noise_scheduler')

    # Initialize your custom pipeline
    pipeline = CustomStableDiffusionPipeline(
        vae=vae,
        unet=unet,
        feature_extractor=feature_extractor,
        scheduler=noise_scheduler)
    print('Initialized pipeline')

    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    pipeline.to(device)

    load_model_and_generate_images(
        pipeline,
        prompts,
        args.gen_img_path,
        args.num_imgs,
        args.guidance_scale,
        uncond_embedding,
        args.same_seed,
        args.output_type
    )
